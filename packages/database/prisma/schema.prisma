// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// pnpm dlx shadcn@canary add sonner
//  toast toaster
//
// pnpm dlx shadcn@canary add label multiselect pagination popover select table tabs textarea toggle-group toggle
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  password       String?
  role           UserRole
  name           String
  searchableName String   @default("")
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  parent         Parent?

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@index([email])
  @@index([searchableName])
  @@index([id])
  @@index([isActive])
  @@map("user")
}

model Parent {
  id              String           @id @unique
  user            User             @relation(fields: [id], references: [id])
  canteenStudents CanteenStudent[]
}

model EnrolledStudent {
  id                    String          @id @default(uuid())
  name                  String
  searchableName        String          @default("")
  class                 String
  gender                String
  matricule             String          @unique
  isRegisteredToCanteen Boolean         @default(false)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  canteenStudent        CanteenStudent?

  @@index([matricule])
  @@index([id])
  @@index([searchableName])
  @@index([isRegisteredToCanteen])
}

model CanteenStudent {
  id                String          @id @default(uuid())
  enrolledStudentId String          @unique
  matriculeHashe    String          @unique
  parentId          String
  isActive          Boolean         @default(true)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  abonnements       Abonnement[]
  notifications     Notification[]
  repas             Repas[]
  parent            Parent          @relation(fields: [parentId], references: [id])
  enrolledStudent   EnrolledStudent @relation(fields: [enrolledStudentId], references: [id])

  @@index([id])
  @@index([enrolledStudentId])
  @@index([matriculeHashe])
  @@index([parentId])
}

model Abonnement {
  duration         Int?
  price            Float?
  startDate        DateTime?           @default(now())
  endDate          DateTime?
  status           StatusSubscription?
  type             String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  canteenStudentId String
  id               Int                 @id @default(autoincrement())
  canteenStudent   CanteenStudent      @relation(fields: [canteenStudentId], references: [id])
}

model Repas {
  id               Int            @id @default(autoincrement())
  canteenStudentId String
  date             DateTime       @default(now())
  status           Boolean?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  student          CanteenStudent @relation(fields: [canteenStudentId], references: [id])
}

model Notification {
  id               Int            @id @default(autoincrement())
  canteenStudentId String
  message          String
  read             Boolean        @default(false)
  type             String
  details          Json?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  canteenStudent   CanteenStudent @relation(fields: [canteenStudentId], references: [id])

  @@index([id])
}

enum UserRole {
  admin
  parent
  agent
}

enum StatusSubscription {
  actif
  expir
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
